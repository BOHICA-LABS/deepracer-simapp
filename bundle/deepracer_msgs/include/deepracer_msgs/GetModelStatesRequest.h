// Generated by gencpp from file deepracer_msgs/GetModelStatesRequest.msg
// DO NOT EDIT!


#ifndef DEEPRACER_MSGS_MESSAGE_GETMODELSTATESREQUEST_H
#define DEEPRACER_MSGS_MESSAGE_GETMODELSTATESREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace deepracer_msgs
{
template <class ContainerAllocator>
struct GetModelStatesRequest_
{
  typedef GetModelStatesRequest_<ContainerAllocator> Type;

  GetModelStatesRequest_()
    : model_names()
    , relative_entity_names()  {
    }
  GetModelStatesRequest_(const ContainerAllocator& _alloc)
    : model_names(_alloc)
    , relative_entity_names(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _model_names_type;
  _model_names_type model_names;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _relative_entity_names_type;
  _relative_entity_names_type relative_entity_names;





  typedef boost::shared_ptr< ::deepracer_msgs::GetModelStatesRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::deepracer_msgs::GetModelStatesRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GetModelStatesRequest_

typedef ::deepracer_msgs::GetModelStatesRequest_<std::allocator<void> > GetModelStatesRequest;

typedef boost::shared_ptr< ::deepracer_msgs::GetModelStatesRequest > GetModelStatesRequestPtr;
typedef boost::shared_ptr< ::deepracer_msgs::GetModelStatesRequest const> GetModelStatesRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::deepracer_msgs::GetModelStatesRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::deepracer_msgs::GetModelStatesRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::deepracer_msgs::GetModelStatesRequest_<ContainerAllocator1> & lhs, const ::deepracer_msgs::GetModelStatesRequest_<ContainerAllocator2> & rhs)
{
  return lhs.model_names == rhs.model_names &&
    lhs.relative_entity_names == rhs.relative_entity_names;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::deepracer_msgs::GetModelStatesRequest_<ContainerAllocator1> & lhs, const ::deepracer_msgs::GetModelStatesRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace deepracer_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::deepracer_msgs::GetModelStatesRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::deepracer_msgs::GetModelStatesRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::deepracer_msgs::GetModelStatesRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::deepracer_msgs::GetModelStatesRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::deepracer_msgs::GetModelStatesRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::deepracer_msgs::GetModelStatesRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::deepracer_msgs::GetModelStatesRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cbf135e797ae47a2c0be5146ab829cc2";
  }

  static const char* value(const ::deepracer_msgs::GetModelStatesRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcbf135e797ae47a2ULL;
  static const uint64_t static_value2 = 0xc0be5146ab829cc2ULL;
};

template<class ContainerAllocator>
struct DataType< ::deepracer_msgs::GetModelStatesRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "deepracer_msgs/GetModelStatesRequest";
  }

  static const char* value(const ::deepracer_msgs::GetModelStatesRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::deepracer_msgs::GetModelStatesRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string[] model_names                 # name of Gazebo Model\n"
"string[] relative_entity_names       # return pose and twist relative to this entity\n"
"                                     # an entity can be a model, body, or geom\n"
"                                     # be sure to use gazebo scoped naming notation (e.g. [model_name::body_name])\n"
"                                     # leave empty or \"world\" will use inertial world frame\n"
;
  }

  static const char* value(const ::deepracer_msgs::GetModelStatesRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::deepracer_msgs::GetModelStatesRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.model_names);
      stream.next(m.relative_entity_names);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetModelStatesRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::deepracer_msgs::GetModelStatesRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::deepracer_msgs::GetModelStatesRequest_<ContainerAllocator>& v)
  {
    s << indent << "model_names[]" << std::endl;
    for (size_t i = 0; i < v.model_names.size(); ++i)
    {
      s << indent << "  model_names[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.model_names[i]);
    }
    s << indent << "relative_entity_names[]" << std::endl;
    for (size_t i = 0; i < v.relative_entity_names.size(); ++i)
    {
      s << indent << "  relative_entity_names[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.relative_entity_names[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DEEPRACER_MSGS_MESSAGE_GETMODELSTATESREQUEST_H
