// Generated by gencpp from file deepracer_msgs/SetVisualPosesResponse.msg
// DO NOT EDIT!


#ifndef DEEPRACER_MSGS_MESSAGE_SETVISUALPOSESRESPONSE_H
#define DEEPRACER_MSGS_MESSAGE_SETVISUALPOSESRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace deepracer_msgs
{
template <class ContainerAllocator>
struct SetVisualPosesResponse_
{
  typedef SetVisualPosesResponse_<ContainerAllocator> Type;

  SetVisualPosesResponse_()
    : success(false)
    , status_message()
    , status()
    , messages()  {
    }
  SetVisualPosesResponse_(const ContainerAllocator& _alloc)
    : success(false)
    , status_message(_alloc)
    , status(_alloc)
    , messages(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _success_type;
  _success_type success;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _status_message_type;
  _status_message_type status_message;

   typedef std::vector<int8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int8_t>> _status_type;
  _status_type status;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _messages_type;
  _messages_type messages;





  typedef boost::shared_ptr< ::deepracer_msgs::SetVisualPosesResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::deepracer_msgs::SetVisualPosesResponse_<ContainerAllocator> const> ConstPtr;

}; // struct SetVisualPosesResponse_

typedef ::deepracer_msgs::SetVisualPosesResponse_<std::allocator<void> > SetVisualPosesResponse;

typedef boost::shared_ptr< ::deepracer_msgs::SetVisualPosesResponse > SetVisualPosesResponsePtr;
typedef boost::shared_ptr< ::deepracer_msgs::SetVisualPosesResponse const> SetVisualPosesResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::deepracer_msgs::SetVisualPosesResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::deepracer_msgs::SetVisualPosesResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::deepracer_msgs::SetVisualPosesResponse_<ContainerAllocator1> & lhs, const ::deepracer_msgs::SetVisualPosesResponse_<ContainerAllocator2> & rhs)
{
  return lhs.success == rhs.success &&
    lhs.status_message == rhs.status_message &&
    lhs.status == rhs.status &&
    lhs.messages == rhs.messages;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::deepracer_msgs::SetVisualPosesResponse_<ContainerAllocator1> & lhs, const ::deepracer_msgs::SetVisualPosesResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace deepracer_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::deepracer_msgs::SetVisualPosesResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::deepracer_msgs::SetVisualPosesResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::deepracer_msgs::SetVisualPosesResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::deepracer_msgs::SetVisualPosesResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::deepracer_msgs::SetVisualPosesResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::deepracer_msgs::SetVisualPosesResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::deepracer_msgs::SetVisualPosesResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a0af81bf1f7c2eacb2693173f999072a";
  }

  static const char* value(const ::deepracer_msgs::SetVisualPosesResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa0af81bf1f7c2eacULL;
  static const uint64_t static_value2 = 0xb2693173f999072aULL;
};

template<class ContainerAllocator>
struct DataType< ::deepracer_msgs::SetVisualPosesResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "deepracer_msgs/SetVisualPosesResponse";
  }

  static const char* value(const ::deepracer_msgs::SetVisualPosesResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::deepracer_msgs::SetVisualPosesResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool success\n"
"string status_message\n"
"int8[] status                        # status of each request: true if succeeded otherwise false\n"
"string[] messages\n"
;
  }

  static const char* value(const ::deepracer_msgs::SetVisualPosesResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::deepracer_msgs::SetVisualPosesResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.success);
      stream.next(m.status_message);
      stream.next(m.status);
      stream.next(m.messages);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetVisualPosesResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::deepracer_msgs::SetVisualPosesResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::deepracer_msgs::SetVisualPosesResponse_<ContainerAllocator>& v)
  {
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
    s << indent << "status_message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.status_message);
    s << indent << "status[]" << std::endl;
    for (size_t i = 0; i < v.status.size(); ++i)
    {
      s << indent << "  status[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.status[i]);
    }
    s << indent << "messages[]" << std::endl;
    for (size_t i = 0; i < v.messages.size(); ++i)
    {
      s << indent << "  messages[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.messages[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DEEPRACER_MSGS_MESSAGE_SETVISUALPOSESRESPONSE_H
