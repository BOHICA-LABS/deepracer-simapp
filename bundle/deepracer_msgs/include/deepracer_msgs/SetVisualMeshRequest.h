// Generated by gencpp from file deepracer_msgs/SetVisualMeshRequest.msg
// DO NOT EDIT!


#ifndef DEEPRACER_MSGS_MESSAGE_SETVISUALMESHREQUEST_H
#define DEEPRACER_MSGS_MESSAGE_SETVISUALMESHREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Vector3.h>

namespace deepracer_msgs
{
template <class ContainerAllocator>
struct SetVisualMeshRequest_
{
  typedef SetVisualMeshRequest_<ContainerAllocator> Type;

  SetVisualMeshRequest_()
    : link_name()
    , visual_name()
    , filename()
    , scale()
    , block(false)  {
    }
  SetVisualMeshRequest_(const ContainerAllocator& _alloc)
    : link_name(_alloc)
    , visual_name(_alloc)
    , filename(_alloc)
    , scale(_alloc)
    , block(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _link_name_type;
  _link_name_type link_name;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _visual_name_type;
  _visual_name_type visual_name;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _filename_type;
  _filename_type filename;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _scale_type;
  _scale_type scale;

   typedef uint8_t _block_type;
  _block_type block;





  typedef boost::shared_ptr< ::deepracer_msgs::SetVisualMeshRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::deepracer_msgs::SetVisualMeshRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetVisualMeshRequest_

typedef ::deepracer_msgs::SetVisualMeshRequest_<std::allocator<void> > SetVisualMeshRequest;

typedef boost::shared_ptr< ::deepracer_msgs::SetVisualMeshRequest > SetVisualMeshRequestPtr;
typedef boost::shared_ptr< ::deepracer_msgs::SetVisualMeshRequest const> SetVisualMeshRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::deepracer_msgs::SetVisualMeshRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::deepracer_msgs::SetVisualMeshRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::deepracer_msgs::SetVisualMeshRequest_<ContainerAllocator1> & lhs, const ::deepracer_msgs::SetVisualMeshRequest_<ContainerAllocator2> & rhs)
{
  return lhs.link_name == rhs.link_name &&
    lhs.visual_name == rhs.visual_name &&
    lhs.filename == rhs.filename &&
    lhs.scale == rhs.scale &&
    lhs.block == rhs.block;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::deepracer_msgs::SetVisualMeshRequest_<ContainerAllocator1> & lhs, const ::deepracer_msgs::SetVisualMeshRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace deepracer_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::deepracer_msgs::SetVisualMeshRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::deepracer_msgs::SetVisualMeshRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::deepracer_msgs::SetVisualMeshRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::deepracer_msgs::SetVisualMeshRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::deepracer_msgs::SetVisualMeshRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::deepracer_msgs::SetVisualMeshRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::deepracer_msgs::SetVisualMeshRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bd4c9ace1fee51074bfa9e87d93bb8f0";
  }

  static const char* value(const ::deepracer_msgs::SetVisualMeshRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbd4c9ace1fee5107ULL;
  static const uint64_t static_value2 = 0x4bfa9e87d93bb8f0ULL;
};

template<class ContainerAllocator>
struct DataType< ::deepracer_msgs::SetVisualMeshRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "deepracer_msgs/SetVisualMeshRequest";
  }

  static const char* value(const ::deepracer_msgs::SetVisualMeshRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::deepracer_msgs::SetVisualMeshRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string link_name\n"
"string visual_name\n"
"string filename\n"
"geometry_msgs/Vector3 scale\n"
"bool block\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::deepracer_msgs::SetVisualMeshRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::deepracer_msgs::SetVisualMeshRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.link_name);
      stream.next(m.visual_name);
      stream.next(m.filename);
      stream.next(m.scale);
      stream.next(m.block);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetVisualMeshRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::deepracer_msgs::SetVisualMeshRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::deepracer_msgs::SetVisualMeshRequest_<ContainerAllocator>& v)
  {
    s << indent << "link_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.link_name);
    s << indent << "visual_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.visual_name);
    s << indent << "filename: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.filename);
    s << indent << "scale: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.scale);
    s << indent << "block: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.block);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DEEPRACER_MSGS_MESSAGE_SETVISUALMESHREQUEST_H
