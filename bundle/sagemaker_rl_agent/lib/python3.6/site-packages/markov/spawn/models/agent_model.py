"""this module handle all agent model spawn and delete"""

import os
import rospkg
import rospy
import yaml
import time

from markov.spawn.constants import (DeepRacerPackages,
                                    SLEEP_SECONDS_AFTER_GAZEBO_MODEL_SERVICE_CALL)
from markov.spawn.gazebo_model import GazeboModel
from markov.spawn.gazebo_xml_loader import GazeboXmlLoader
from markov.spawn.models.model_interface import ModelInterface
from geometry_msgs.msg import Pose
from subprocess import Popen
from typing import Optional


class AgentModel(ModelInterface):
    """class to handle gazebo agent model spawn and delete
    """
    def __init__(self, name: str = "racecar"):
        """initialize AgentModel

        Args:
            name (str): name of agent model
        """
        super(AgentModel, self).__init__()
        self._rospack = rospkg.RosPack()
        self._agent_file_path = os.path.join(
            self._rospack.get_path(DeepRacerPackages.DEEPRACER_SIMULATION_ENVIRONMENT),
            "urdf",
            "deepracer",
            "racecar.xacro")
        self._is_spawned = False
        self._name = name

    def spawn(self, pose: Optional[Pose] = None, **kwargs) -> None:
        """spawn agent model in gazebo simulator

        Args:
            pose (Pose): model pose
            **kwargs: Arbitrary keyword arguments

        """
        if not self._is_spawned:
            model_urdf = GazeboXmlLoader.parse(file_path=self._agent_file_path,
                                               **kwargs,
                                               racecar_name=self._name)

            # load robot_description into ros parameter server
            rospy.set_param("/{}/robot_description".format(self._name), model_urdf)

            # roslaunch controller_manager and robot_state_publisher
            Popen("roslaunch deepracer_simulation_environment racecar_control.launch \
                racecar_name:={} make_required:={} __ns:={}".format(self._name,
                                                                    "false",
                                                                    self._name),
                  shell=True,
                  executable="/bin/bash")

            # spawn agent urdf model
            GazeboModel.get_instance().spawn_urdf(model_name=self._name,
                                                  model_xml=model_urdf,
                                                  robot_namespace="/{}".format(self._name),
                                                  initial_pose=pose if pose else Pose(),
                                                  reference_frame='')

            # TODO: check to make sure urdf spawn is successfully completed
            # sleep to make sure spawn_urdf call has enough time to complete
            time.sleep(SLEEP_SECONDS_AFTER_GAZEBO_MODEL_SERVICE_CALL)

            self._is_spawned = True
            rospy.loginfo("[AgentModel]: spawn {}".format(self._name))
        else:
            rospy.loginfo("[AgentModel]: {} cannot be spawned again \
                without deleting".format(self._name))

    def delete(self) -> None:
        """delete the agent model

        we have noticed such error message that after the agent is deleted
        its camera service (/agent1/camera/zed/set_parameters) is still left over.
        When spawn the next agent with the same namespace, we will have error message below.
        However, even though it is poputing the logs, we have not seen any issue yet.

        [ERROR] [1616111166.451933744, 49.818000000]:
        Tried to advertise a service that is already advertised in this node [/agent1/camera/zed/set_parameters]
        """
        if self._is_spawned:
            # kill agent controller manager and robot state publisher node
            Popen("rosnode kill /{}/controller_manager".format(self._name),
                  shell=True,
                  executable="/bin/bash")
            Popen("rosnode kill /{}/robot_state_publisher".format(self._name),
                  shell=True,
                  executable="/bin/bash")

            # delete agent model from gazebo
            GazeboModel.get_instance().delete(model_name=self._name)

            # TODO: check to make sure urdf delete is successfully completed
            # sleep to make sure delete call has enough time to complete
            time.sleep(SLEEP_SECONDS_AFTER_GAZEBO_MODEL_SERVICE_CALL)

            self._is_spawned = False
            rospy.loginfo("[AgentModel]: delete {}".format(self._name))
        else:
            rospy.loginfo("[AgentModel]: {} does not exist \
                and cannot be deleted".format(self._name))
