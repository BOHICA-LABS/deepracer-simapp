// Generated by gencpp from file deepracer_simulation_environment/VideoMetricsSrvResponse.msg
// DO NOT EDIT!


#ifndef DEEPRACER_SIMULATION_ENVIRONMENT_MESSAGE_VIDEOMETRICSSRVRESPONSE_H
#define DEEPRACER_SIMULATION_ENVIRONMENT_MESSAGE_VIDEOMETRICSSRVRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point32.h>

namespace deepracer_simulation_environment
{
template <class ContainerAllocator>
struct VideoMetricsSrvResponse_
{
  typedef VideoMetricsSrvResponse_<ContainerAllocator> Type;

  VideoMetricsSrvResponse_()
    : lap_counter(0.0)
    , completion_percentage(0.0)
    , reset_counter(0)
    , throttle(0.0)
    , steering(0.0)
    , best_lap_time(0.0)
    , total_evaluation_time(0.0)
    , done(false)
    , x(0.0)
    , y(0.0)
    , object_locations()
    , episode_status()
    , pause_duration(0.0)  {
    }
  VideoMetricsSrvResponse_(const ContainerAllocator& _alloc)
    : lap_counter(0.0)
    , completion_percentage(0.0)
    , reset_counter(0)
    , throttle(0.0)
    , steering(0.0)
    , best_lap_time(0.0)
    , total_evaluation_time(0.0)
    , done(false)
    , x(0.0)
    , y(0.0)
    , object_locations(_alloc)
    , episode_status(_alloc)
    , pause_duration(0.0)  {
  (void)_alloc;
    }



   typedef float _lap_counter_type;
  _lap_counter_type lap_counter;

   typedef float _completion_percentage_type;
  _completion_percentage_type completion_percentage;

   typedef int32_t _reset_counter_type;
  _reset_counter_type reset_counter;

   typedef float _throttle_type;
  _throttle_type throttle;

   typedef float _steering_type;
  _steering_type steering;

   typedef float _best_lap_time_type;
  _best_lap_time_type best_lap_time;

   typedef float _total_evaluation_time_type;
  _total_evaluation_time_type total_evaluation_time;

   typedef uint8_t _done_type;
  _done_type done;

   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef std::vector< ::geometry_msgs::Point32_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point32_<ContainerAllocator> >> _object_locations_type;
  _object_locations_type object_locations;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _episode_status_type;
  _episode_status_type episode_status;

   typedef float _pause_duration_type;
  _pause_duration_type pause_duration;





  typedef boost::shared_ptr< ::deepracer_simulation_environment::VideoMetricsSrvResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::deepracer_simulation_environment::VideoMetricsSrvResponse_<ContainerAllocator> const> ConstPtr;

}; // struct VideoMetricsSrvResponse_

typedef ::deepracer_simulation_environment::VideoMetricsSrvResponse_<std::allocator<void> > VideoMetricsSrvResponse;

typedef boost::shared_ptr< ::deepracer_simulation_environment::VideoMetricsSrvResponse > VideoMetricsSrvResponsePtr;
typedef boost::shared_ptr< ::deepracer_simulation_environment::VideoMetricsSrvResponse const> VideoMetricsSrvResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::deepracer_simulation_environment::VideoMetricsSrvResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::deepracer_simulation_environment::VideoMetricsSrvResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::deepracer_simulation_environment::VideoMetricsSrvResponse_<ContainerAllocator1> & lhs, const ::deepracer_simulation_environment::VideoMetricsSrvResponse_<ContainerAllocator2> & rhs)
{
  return lhs.lap_counter == rhs.lap_counter &&
    lhs.completion_percentage == rhs.completion_percentage &&
    lhs.reset_counter == rhs.reset_counter &&
    lhs.throttle == rhs.throttle &&
    lhs.steering == rhs.steering &&
    lhs.best_lap_time == rhs.best_lap_time &&
    lhs.total_evaluation_time == rhs.total_evaluation_time &&
    lhs.done == rhs.done &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.object_locations == rhs.object_locations &&
    lhs.episode_status == rhs.episode_status &&
    lhs.pause_duration == rhs.pause_duration;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::deepracer_simulation_environment::VideoMetricsSrvResponse_<ContainerAllocator1> & lhs, const ::deepracer_simulation_environment::VideoMetricsSrvResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace deepracer_simulation_environment

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::deepracer_simulation_environment::VideoMetricsSrvResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::deepracer_simulation_environment::VideoMetricsSrvResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::deepracer_simulation_environment::VideoMetricsSrvResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::deepracer_simulation_environment::VideoMetricsSrvResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::deepracer_simulation_environment::VideoMetricsSrvResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::deepracer_simulation_environment::VideoMetricsSrvResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::deepracer_simulation_environment::VideoMetricsSrvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bdf8a82e025237227055893ab956222e";
  }

  static const char* value(const ::deepracer_simulation_environment::VideoMetricsSrvResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbdf8a82e02523722ULL;
  static const uint64_t static_value2 = 0x7055893ab956222eULL;
};

template<class ContainerAllocator>
struct DataType< ::deepracer_simulation_environment::VideoMetricsSrvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "deepracer_simulation_environment/VideoMetricsSrvResponse";
  }

  static const char* value(const ::deepracer_simulation_environment::VideoMetricsSrvResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::deepracer_simulation_environment::VideoMetricsSrvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 lap_counter\n"
"float32 completion_percentage\n"
"int32 reset_counter\n"
"float32 throttle\n"
"float32 steering\n"
"float32 best_lap_time\n"
"float32 total_evaluation_time\n"
"bool done\n"
"float32 x\n"
"float32 y\n"
"geometry_msgs/Point32[] object_locations\n"
"string episode_status\n"
"float32 pause_duration\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point32\n"
"# This contains the position of a point in free space(with 32 bits of precision).\n"
"# It is recommeded to use Point wherever possible instead of Point32.  \n"
"# \n"
"# This recommendation is to promote interoperability.  \n"
"#\n"
"# This message is designed to take up less space when sending\n"
"# lots of points at once, as in the case of a PointCloud.  \n"
"\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
;
  }

  static const char* value(const ::deepracer_simulation_environment::VideoMetricsSrvResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::deepracer_simulation_environment::VideoMetricsSrvResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.lap_counter);
      stream.next(m.completion_percentage);
      stream.next(m.reset_counter);
      stream.next(m.throttle);
      stream.next(m.steering);
      stream.next(m.best_lap_time);
      stream.next(m.total_evaluation_time);
      stream.next(m.done);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.object_locations);
      stream.next(m.episode_status);
      stream.next(m.pause_duration);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VideoMetricsSrvResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::deepracer_simulation_environment::VideoMetricsSrvResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::deepracer_simulation_environment::VideoMetricsSrvResponse_<ContainerAllocator>& v)
  {
    s << indent << "lap_counter: ";
    Printer<float>::stream(s, indent + "  ", v.lap_counter);
    s << indent << "completion_percentage: ";
    Printer<float>::stream(s, indent + "  ", v.completion_percentage);
    s << indent << "reset_counter: ";
    Printer<int32_t>::stream(s, indent + "  ", v.reset_counter);
    s << indent << "throttle: ";
    Printer<float>::stream(s, indent + "  ", v.throttle);
    s << indent << "steering: ";
    Printer<float>::stream(s, indent + "  ", v.steering);
    s << indent << "best_lap_time: ";
    Printer<float>::stream(s, indent + "  ", v.best_lap_time);
    s << indent << "total_evaluation_time: ";
    Printer<float>::stream(s, indent + "  ", v.total_evaluation_time);
    s << indent << "done: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.done);
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "object_locations[]" << std::endl;
    for (size_t i = 0; i < v.object_locations.size(); ++i)
    {
      s << indent << "  object_locations[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "    ", v.object_locations[i]);
    }
    s << indent << "episode_status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.episode_status);
    s << indent << "pause_duration: ";
    Printer<float>::stream(s, indent + "  ", v.pause_duration);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DEEPRACER_SIMULATION_ENVIRONMENT_MESSAGE_VIDEOMETRICSSRVRESPONSE_H
