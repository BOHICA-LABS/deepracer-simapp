// Generated by gencpp from file deepracer_simulation_environment/TopCamDataSrvResponse.msg
// DO NOT EDIT!


#ifndef DEEPRACER_SIMULATION_ENVIRONMENT_MESSAGE_TOPCAMDATASRVRESPONSE_H
#define DEEPRACER_SIMULATION_ENVIRONMENT_MESSAGE_TOPCAMDATASRVRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace deepracer_simulation_environment
{
template <class ContainerAllocator>
struct TopCamDataSrvResponse_
{
  typedef TopCamDataSrvResponse_<ContainerAllocator> Type;

  TopCamDataSrvResponse_()
    : horizontal_fov(0.0)
    , padding_pct(0.0)
    , image_width(0.0)
    , image_height(0.0)  {
    }
  TopCamDataSrvResponse_(const ContainerAllocator& _alloc)
    : horizontal_fov(0.0)
    , padding_pct(0.0)
    , image_width(0.0)
    , image_height(0.0)  {
  (void)_alloc;
    }



   typedef float _horizontal_fov_type;
  _horizontal_fov_type horizontal_fov;

   typedef float _padding_pct_type;
  _padding_pct_type padding_pct;

   typedef float _image_width_type;
  _image_width_type image_width;

   typedef float _image_height_type;
  _image_height_type image_height;





  typedef boost::shared_ptr< ::deepracer_simulation_environment::TopCamDataSrvResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::deepracer_simulation_environment::TopCamDataSrvResponse_<ContainerAllocator> const> ConstPtr;

}; // struct TopCamDataSrvResponse_

typedef ::deepracer_simulation_environment::TopCamDataSrvResponse_<std::allocator<void> > TopCamDataSrvResponse;

typedef boost::shared_ptr< ::deepracer_simulation_environment::TopCamDataSrvResponse > TopCamDataSrvResponsePtr;
typedef boost::shared_ptr< ::deepracer_simulation_environment::TopCamDataSrvResponse const> TopCamDataSrvResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::deepracer_simulation_environment::TopCamDataSrvResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::deepracer_simulation_environment::TopCamDataSrvResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::deepracer_simulation_environment::TopCamDataSrvResponse_<ContainerAllocator1> & lhs, const ::deepracer_simulation_environment::TopCamDataSrvResponse_<ContainerAllocator2> & rhs)
{
  return lhs.horizontal_fov == rhs.horizontal_fov &&
    lhs.padding_pct == rhs.padding_pct &&
    lhs.image_width == rhs.image_width &&
    lhs.image_height == rhs.image_height;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::deepracer_simulation_environment::TopCamDataSrvResponse_<ContainerAllocator1> & lhs, const ::deepracer_simulation_environment::TopCamDataSrvResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace deepracer_simulation_environment

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::deepracer_simulation_environment::TopCamDataSrvResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::deepracer_simulation_environment::TopCamDataSrvResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::deepracer_simulation_environment::TopCamDataSrvResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::deepracer_simulation_environment::TopCamDataSrvResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::deepracer_simulation_environment::TopCamDataSrvResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::deepracer_simulation_environment::TopCamDataSrvResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::deepracer_simulation_environment::TopCamDataSrvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "eed9195ebff712c1941314f098f70944";
  }

  static const char* value(const ::deepracer_simulation_environment::TopCamDataSrvResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xeed9195ebff712c1ULL;
  static const uint64_t static_value2 = 0x941314f098f70944ULL;
};

template<class ContainerAllocator>
struct DataType< ::deepracer_simulation_environment::TopCamDataSrvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "deepracer_simulation_environment/TopCamDataSrvResponse";
  }

  static const char* value(const ::deepracer_simulation_environment::TopCamDataSrvResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::deepracer_simulation_environment::TopCamDataSrvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 horizontal_fov\n"
"float32 padding_pct\n"
"float32 image_width\n"
"float32 image_height\n"
;
  }

  static const char* value(const ::deepracer_simulation_environment::TopCamDataSrvResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::deepracer_simulation_environment::TopCamDataSrvResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.horizontal_fov);
      stream.next(m.padding_pct);
      stream.next(m.image_width);
      stream.next(m.image_height);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TopCamDataSrvResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::deepracer_simulation_environment::TopCamDataSrvResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::deepracer_simulation_environment::TopCamDataSrvResponse_<ContainerAllocator>& v)
  {
    s << indent << "horizontal_fov: ";
    Printer<float>::stream(s, indent + "  ", v.horizontal_fov);
    s << indent << "padding_pct: ";
    Printer<float>::stream(s, indent + "  ", v.padding_pct);
    s << indent << "image_width: ";
    Printer<float>::stream(s, indent + "  ", v.image_width);
    s << indent << "image_height: ";
    Printer<float>::stream(s, indent + "  ", v.image_height);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DEEPRACER_SIMULATION_ENVIRONMENT_MESSAGE_TOPCAMDATASRVRESPONSE_H
